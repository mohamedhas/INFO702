/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   Image2DWriter.hpp
 * Author: mohamed
 *
 * Created on November 22, 2016, 8:55 AM
 */

#ifndef IMAGE2DWRITER_HPP
#define IMAGE2DWRITER_HPP
#include <string> // chaînes de caractères
#include <fstream> // flux sur les fichiers
#include <sstream> // flux sur les chaînes de caractères
#include <assert.h>
#include <limits>
#include "Color.hpp"
#include "Image2D.hpp"
#include <iostream>

template <typename TValue>
class Image2DWriter {
public:
    typedef TValue Value;
    typedef Image2D<Value> Image;

    static bool write(Image & img, std::ostream & output, bool ascii) {
        std::cerr << "[Image2DWriter<TValue>::write] NOT IMPLEMENTED." << std::endl;
        return false;
    }
};



/// Specialization for gray-level images.

template<>
class Image2DWriter<unsigned char> {
public:
    typedef unsigned char Value;
    typedef Image2D<Value> Image;

    static bool write(Image & img, std::ostream & output, bool ascii) {
        //    std::string w_h = std::to_string(img.w()).append(" ").append(std::to_string(img.h()));
        output << "P5" << std::endl; // PPM raw
        output << "# Generated by You !" << std::endl;
        output << img.w() << " " << img.h() << std::endl;
        output << "255" << std::endl;
        output.write((const char*) img.getData(), img.h() * img.w());
        true;
    }
};


/// Specialization for color images.

template<>
class Image2DWriter<Color> {
public:
    typedef Color Value;
    typedef Image2D<Value> Image;

    static bool write(Image & img, std::ostream & output, bool ascii) {
        output << "P6" << std::endl; // PPM raw
        output << "# Generated by You !" << std::endl;
        output << img.w() << " " << img.h() << std::endl;
        output << "255" << std::endl;
        for (Image::Iterator it = img.begin(), itE = img.end(); it != itE; ++it) // (*)
        {
            Color c = *it;
            output << c.red << c.green << c.blue;
        }
    }

    static bool invert_red_blue(Image & img, std::ostream & output, bool ascii) {
        output << "P6" << std::endl; // PPM raw
        output << "# Generated by You !" << std::endl;
        output << img.w() << " " << img.h() << std::endl;
        output << "255" << std::endl;
        for (Image::Iterator it = img.begin(), itE = img.end(); it != itE; ++it) // (*)
        {
            Color c = *it;
            output << c.blue << c.green << c.red;
        }
    }
};
#endif /* IMAGE2DWRITER_HPP */